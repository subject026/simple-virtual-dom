{"version":3,"sources":["vdom/createElement.js","vdom/render.js","vdom/mount.js","vdom/diff.js","main.js"],"names":["tagName","attrs","children","renderElem","$el","document","createElement","Object","entries","key","value","setAttribute","child","childEl","render","appendChild","vNode","createTextNode","$node","target","replaceWith","zip","xs","ys","zipped","i","Math","min","length","push","diffAttrs","oldAttrs","newAttrs","patches","removeAttribute","patch","diffChildren","oldVChildren","newVChildren","childPatches","oldVChild","newVChild","diff","additionalPatches","additionalVChild","slice","$parent","childNodes","vNewNode","vOldNode","undefined","remove","$newNode","tagname","patchAttrs","patchChildren","createVApp","count","id","dataCount","String","type","src","vApp","$app","$rootEl","getElementById","setInterval","vNewApp"],"mappings":"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","file":"main.1f19ae8e.map","sourceRoot":"../src","sourcesContent":["// Default values mean we won't get errors if we don't pass attributes or children (or any options arg at all)\nexport default (tagName, { attrs = {}, children = [] } = {}) => {\n  return {\n    tagName,\n    attrs: attrs,\n    children: children\n  };\n};\n","const renderElem = ({ tagName, attrs, children }) => {\n  // Create element\n  const $el = document.createElement(tagName);\n  // Set attributes\n  for (const [key, value] of Object.entries(attrs)) {\n    $el.setAttribute(key, value);\n  }\n  // Set children\n  for (const child of children) {\n    const childEl = render(child);\n    $el.appendChild(childEl);\n  }\n  return $el;\n};\n\nconst render = vNode => {\n  // If it's just a string coming in then we create a text node\n  if (typeof vNode === \"string\") return document.createTextNode(vNode);\n  return renderElem(vNode);\n};\n\nexport default render;\n","export default ($node, target) => {\n  target.replaceWith($node);\n  return $node;\n};\n","import render from \"./render\";\n\nconst zip = (xs, ys) => {\n  const zipped = [];\n  for (let i = 0; i < Math.min(xs.length, ys.length); i++) {\n    zipped.push([xs[i], ys[i]]);\n  }\n  return zipped;\n};\n\nconst diffAttrs = (oldAttrs, newAttrs) => {\n  const patches = [];\n  // Set new attributes first\n  for (const [key, value] of Object.entries(newAttrs)) {\n    patches.push($node => {\n      $node.setAttribute(key, value);\n      return $node;\n    });\n  }\n  // Then we remove the old ones\n  for (const key in oldAttrs) {\n    // if the key in the old attributes isn't in the new attributes\n    if (!(key in newAttrs)) {\n      patches.push($node => {\n        $node.removeAttribute(key);\n        return $node;\n      });\n    }\n  }\n  // return function that applies all the patches\n  return $node => {\n    for (const patch of patches) {\n      patch($node);\n    }\n  };\n};\n\nconst diffChildren = (oldVChildren, newVChildren) => {\n  const childPatches = [];\n  // first go through old children, if a child isn't in vNewChildren it will be removed by diff\n  for (const [oldVChild, newVChild] of zip(oldVChildren, newVChildren)) {\n    childPatches.push(diff(oldVChild, newVChild));\n  }\n\n  // Additional patches are for the children not included in the zipped array\n  const additionalPatches = [];\n  for (const additionalVChild of newVChildren.slice(oldVChildren.length)) {\n    additionalPatches.push($node => {\n      $node.appendChild(render(additionalVChild));\n      return $node;\n    });\n  }\n\n  return $parent => {\n    for (const [patch, child] of zip(childPatches, $parent.childNodes)) {\n      patch(child);\n    }\n    for (const patch of additionalPatches) {\n      patch($parent);\n    }\n    return $parent;\n  };\n};\n\nconst diff = (vNewNode, vOldNode) => {\n  // First if vNewNode is undefined we'll just remove it\n  if (vNewNode === undefined) {\n    return $node => {\n      $node.remove();\n      return undefined;\n    };\n  }\n\n  // If either node is a string\n  if (typeof vOldNode === \"string\" || typeof vOldNode === \"string\") {\n    // Replace old with new if they're not the same\n    if (vOldNode !== vNewNode) {\n      return $node => {\n        const $newNode = render(vNewNode);\n        $node.replaceWith($newNode);\n        return $newNode;\n      };\n    } else {\n      return $node => undefined;\n    }\n  }\n\n  /* To calculate the minimal differences between 2 trees takes (((blugh N Q...))) With some assumption in mind we can make the calculation to be (((all of N))) which is much more efficent??\n  Assumption is that if element tags have different tag names they we don't apply patch we just replace. According to React, most of the time this is good for practical uses. */\n\n  // So, if the tag names are difference the function will replace the whole element node:\n  if (vOldNode.tagname !== vNewNode.tagname) {\n    return $node => {\n      const $newNode = render(vNewNode);\n      $node.replaceWith($newNode);\n      return $newNode;\n    };\n  }\n\n  // If tag names are the same we have to compare attributes and children:\n  const patchAttrs = diffAttrs(vOldNode.attrs, vNewNode.attrs);\n  const patchChildren = diffChildren(vOldNode.children, vNewNode.children);\n\n  // Once we have patches based on these comparisons we return a function that applies them to whatever node is passed in:\n  return $node => {\n    patchAttrs($node);\n    patchChildren($node);\n    return $node;\n  };\n};\n\nexport default diff;\n","import createElement from \"./vdom/createElement\";\nimport render from \"./vdom/render\";\nimport mount from \"./vdom/mount\";\nimport diff from \"./vdom/diff\";\n\n/* Virtual DOM tree is just an object literal\n\ncreateVApp() - takes the count in and creates our virtual DOM tree\nrender()     - creates a tree of actual DOM elements based on the object passed in \nmount()      - replaces target DOM element with the root element of the rendered tree\n\n*/\n\nconst createVApp = count => {\n  return createElement(\"div\", {\n    attrs: {\n      id: \"app\",\n      dataCount: count\n    },\n    children: [\n      String(count),\n      createElement(\"input\", {\n        attrs: {\n          id: \"important-input\",\n          type: \"text\"\n        }\n      }),\n      createElement(\"img\", {\n        attrs: {\n          src: \"https://media.giphy.com/media/MWtVSXiqOYuqdfvqb0/giphy.gif\"\n        },\n        children: []\n      })\n    ]\n  });\n};\n\nlet count = 0;\nlet vApp = createVApp(count);\nconst $app = render(vApp);\n\n// This mounts our tree of DOM els\n// rootEl will refer to that same tree\nlet $rootEl = mount($app, document.getElementById(\"app\"));\n\nsetInterval(() => {\n  count++;\n  // Once data/prop has been changed we create a new virtual dom tree\n  const vNewApp = createVApp(count);\n  // Diff function checks what needs to be updated and returns a patch function which carries our necessary DOM updates\n  const patch = diff(vApp, vNewApp);\n  patch($rootEl);\n  // Store updated vNewApp as vApp ready for next interval\n  vApp = vNewApp;\n}, 1000);\n"]}